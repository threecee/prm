# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                   controllers.Application.index

# JavaScript routes object
GET           /jsroutes.js        controllers.Application.jsRoutes()

# Routes used by Angular
# ~~~~

# Authentication
POST          /login              controllers.Application.login()
POST          /logout             controllers.Application.logout()

# Users
GET           /users/:id          controllers.Users.user(id: Long)
POST          /users              controllers.Users.createUser()
PUT           /users/:id          controllers.Users.updateUser(id: Long)
DELETE        /users/:id          controllers.Users.deleteUser(id: Long)
GET           /authuser           controllers.Users.authUser()

# EquipmentStates
GET     /classification/equipmentstates                  controllers.EquipmentStates.equipmentStates()
GET     /classification/equipmentstates/:id              controllers.EquipmentStates.equipmentState(id: Long)
POST    /classification/equipmentstates                  controllers.EquipmentStates.createEquipmentState()
PUT     /classification/equipmentstates/:id              controllers.EquipmentStates.updateEquipmentState(id: Long)
DELETE  /classification/equipmentstates/:id              controllers.EquipmentStates.deleteEquipmentState(id: Long)

# ComponentTypes
GET     /classification/componenttypes                  controllers.ComponentTypes.componentTypes()
GET     /classification/componenttypesforpowerstations                  controllers.ComponentTypes.componentTypesForPowerStations()
GET     /classification/componenttypesforpowerunits                  controllers.ComponentTypes.componentTypesForPowerUnits()
GET     /classification/componenttypes/:id              controllers.ComponentTypes.componentType(id: Long)
POST    /classification/componenttypes                  controllers.ComponentTypes.createComponentType()
PUT     /classification/componenttypes/:id              controllers.ComponentTypes.updateComponentType(id: Long)
DELETE  /classification/componenttypes/:id              controllers.ComponentTypes.deleteComponentType(id: Long)

# IncidentTypes
GET     /classification/incidenttypes                  controllers.IncidentTypes.incidentTypes()
GET     /classification/incidenttypes/:id              controllers.IncidentTypes.incidentType(id: Long)
POST    /classification/incidenttypes                  controllers.IncidentTypes.createIncidentType()
POST    /classification/incidenttypesByVal                  controllers.IncidentTypes.createIncidentTypeByValues(name:String, description:String)
PUT     /classification/incidenttypes/:id              controllers.IncidentTypes.updateIncidentType(id: Long)
DELETE  /classification/incidenttypes/:id              controllers.IncidentTypes.deleteIncidentType(id: Long)

# ResidualLifeSpans
GET     /classification/residuallifespans                  controllers.ResidualLifeSpans.residualLifeSpans()
GET     /classification/residuallifespans/:id              controllers.ResidualLifeSpans.residualLifeSpan(id: Long)
POST    /classification/residuallifespans                  controllers.ResidualLifeSpans.createResidualLifeSpan(componentId:Long)
POST    /classification/residuallifespansByVal             controllers.ResidualLifeSpans.createResidualLifeSpanByValues(componentId:Long, equipmentStateId:Long, span:Double)
PUT     /classification/residuallifespans/:id              controllers.ResidualLifeSpans.updateResidualLifeSpan(id: Long)
DELETE  /classification/residuallifespans/:id              controllers.ResidualLifeSpans.deleteResidualLifeSpan(id: Long)

# Repairs
GET     /classification/repairs                  controllers.Repairs.repairs()
GET     /classification/repairs/:id              controllers.Repairs.repair(id: Long)
POST    /classification/repairs                  controllers.Repairs.createRepair(componentId:Long)
POST    /classification/repairsByVal             controllers.Repairs.createRepairByValues(componentId:Long, incidentId:Long, span:Double, cost:Double, probability:Double)
PUT     /classification/repairs/:id              controllers.Repairs.updateRepair(id: Long)
DELETE  /classification/repairs/:id              controllers.Repairs.deleteRepair(id: Long)

# DowntimeCosts
GET     /classification/downtimecosts                  controllers.DowntimeCosts.downtimecosts()
GET     /classification/downtimecosts/:id              controllers.DowntimeCosts.downtimecost(id: Long)
POST    /classification/downtimecosts                  controllers.DowntimeCosts.createDowntimeCost(powerUnitId:Long)
PUT     /classification/downtimecosts/:id              controllers.DowntimeCosts.updateDowntimeCost(id: Long)
DELETE  /classification/downtimecosts/:id              controllers.DowntimeCosts.deleteDowntimeCost(id: Long)

# Components
GET     /classification/components                  controllers.Components.components()
GET     /classification/components/:id              controllers.Components.component(id: Long)
POST    /classification/componentsForPowerStation                  controllers.Components.createComponentForPowerStation(powerStationId:Long)
PUT     /classification/componentsForPowerStation/:id              controllers.Components.updateComponentForPowerStation(id: Long)
POST    /classification/componentsForPowerUnit                  controllers.Components.createComponentForPowerUnit(powerUnitId:Long)
PUT     /classification/componentsForPowerUnit/:id              controllers.Components.updateComponentForPowerUnit(id: Long)
DELETE  /classification/components/:id              controllers.Components.deleteComponent(id: Long)

# PowerUnits
GET     /classification/powerunits                  controllers.PowerUnits.powerUnits()
GET     /classification/powerunits/:id              controllers.PowerUnits.powerUnit(id: Long)
POST    /classification/powerunits                  controllers.PowerUnits.createPowerUnit(powerStationId:Long)
PUT     /classification/powerunits/:id              controllers.PowerUnits.updatePowerUnit(id: Long)
DELETE  /classification/powerunits/:id              controllers.PowerUnits.deletePowerUnit(id: Long)

# PowerStations
GET     /classification/powerstations                  controllers.PowerStations.powerStations()
GET     /classification/powerstations/:id              controllers.PowerStations.powerStation(id: Long)
POST    /classification/powerstations                  controllers.PowerStations.createPowerStation()
PUT     /classification/powerstations/:id              controllers.PowerStations.updatePowerStation(id: Long)
DELETE  /classification/powerstations/:id              controllers.PowerStations.deletePowerStation(id: Long)

# Groups
GET     /classification/groups                  controllers.Groups.groups()
GET     /classification/groups/:id              controllers.Groups.group(id: Long)
POST    /classification/groups                  controllers.Groups.createGroup()
PUT     /classification/groups/:id              controllers.Groups.updateGroup(id: Long)
DELETE  /classification/groups/:id              controllers.Groups.deleteGroup(id: Long)

# Regions
GET     /classification/regions                  controllers.Regions.regions()
GET     /classification/regions/:id              controllers.Regions.region(id: Long)
POST    /classification/regions                  controllers.Regions.createRegion()
PUT     /classification/regions/:id              controllers.Regions.updateRegion(id: Long)
DELETE  /classification/regions/:id              controllers.Regions.deleteRegion(id: Long)

#imports
POST    /imports/powerstations                  controllers.importers.ImportPowerStations.powerstations()


# Static
# ~~~~

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file           controllers.Assets.versioned(path="/public", file: Asset)
